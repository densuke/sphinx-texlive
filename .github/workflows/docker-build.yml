name: Build and Push Docker Image

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # 手動実行のためのトリガー
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # タイムスタンプを生成する共通ジョブ
  prepare:
    name: Prepare Build Parameters
    runs-on: ubuntu-latest
    outputs:
      epoch: ${{ steps.time.outputs.epoch }}  # この値がジョブの出力として定義される
    
    steps:
      - name: Generate common timestamp
        id: time
        run: echo "epoch=$(date +%s)" >> $GITHUB_OUTPUT  # GITHUB_OUTPUTにエントリを追加

  # 各アーキテクチャごとのビルドジョブ
  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.runner }}
    needs: prepare  # prepareジョブに依存することを宣言
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
            arch-suffix: amd64
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            arch-suffix: arm64
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.prepare.outputs.epoch }}-${{ matrix.arch-suffix }}  # ここでprepareジョブの出力を参照
            type=raw,value=latest-${{ matrix.arch-suffix }}

      - name: Build and push architecture specific Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  # 各アーキテクチャのイメージをマージしてプッシュするジョブ
  merge:
    name: Merge and Push Multi-arch Image
    runs-on: ubuntu-latest
    needs: [prepare, build]  # 両方のジョブに依存
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.prepare.outputs.epoch }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      # マルチアーキテクチャマニフェストの作成とプッシュ
      - name: Create and push manifest
        run: |
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.epoch }} \  # ここでも同じ値を参照
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.epoch }}-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.epoch }}-arm64
          
          # mainブランチの場合のみlatestタグをプッシュ
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-amd64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-arm64
          fi
          
          # 追加のタグもマージ（GitHub参照、セマンティックバージョンなど）
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | grep -v "${{ needs.prepare.outputs.epoch }}" | grep -v "latest"); do
            tag_suffix=$(echo $tag | sed "s|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:||")
            docker buildx imagetools create -t $tag \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.epoch }}-amd64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.epoch }}-arm64
          done
