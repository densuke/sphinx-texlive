name: Build and Push Docker Image

on:
  # 毎週月曜日の日本時間午後3時(UTC 06:00)に実行
  schedule:
    - cron: '0 6 * * 1'
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # 手動実行のためのトリガー
  workflow_dispatch:
 
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# ジョブの並列実行は起きないようにする
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # タイムスタンプを生成する共通ジョブ
  prepare:
    name: Prepare Build Parameters
    runs-on: ubuntu-latest
    outputs:
      epoch: ${{ steps.time.outputs.epoch }}  # この値がジョブの出力として定義される
    
    steps:
      - name: Generate common timestamp
        id: time
        run: echo "epoch=$(date +%s)" >> $GITHUB_OUTPUT  # GITHUB_OUTPUTにエントリを追加

  # 各アーキテクチャごとのビルドジョブ
  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.runner }}
    needs: prepare  # prepareジョブに依存することを宣言
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-24.04
            arch-suffix: amd64
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            arch-suffix: arm64
    
    permissions:
      contents: read
      packages: write  # パッケージへの書き込み権限を確認
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.prepare.outputs.epoch }}-${{ matrix.arch-suffix }}  # ここでprepareジョブの出力を参照
            type=raw,value=latest-${{ matrix.arch-suffix }}

      - name: Build and push architecture specific Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          provenance: false

      - name: Save image digest
        id: save-digest
        run: |
          echo "${{ steps.meta.outputs.tags }}" > digest-${{ matrix.arch-suffix }}.txt
        # アーティファクトとしてアップロード
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: digest-${{ matrix.arch-suffix }}
          path: digest-${{ matrix.arch-suffix }}.txt

  # 各アーキテクチャのイメージをマージしてプッシュするジョブ
  merge:
    name: Merge and Push Multi-arch Image
    runs-on: ubuntu-latest
    needs: [prepare, build]  # 両方のジョブに依存
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write  # パッケージへの書き込み権限を確認
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download amd64 artifact
        uses: actions/download-artifact@v4
        with:
          name: digest-amd64
          path: ./amd64/  # ディレクトリとして保存

      - name: Download arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: digest-arm64
          path: ./arm64/  # ディレクトリとして保存

      - name: Validate digests
        id: validate-digests
        run: |
          DIGEST_AMD64=$(cat ./amd64/digest-amd64.txt | tr '\n' ' ' | sed 's; $;;')
          DIGEST_ARM64=$(cat ./arm64/digest-arm64.txt | tr '\n' ' ' | sed 's; $;;')
          if [ -z "$DIGEST_AMD64" ] || [ -z "$DIGEST_ARM64" ]; then
            echo "Error: One or more digests are empty."
            exit 1
          fi
          echo "digest_amd64=$DIGEST_AMD64" >> $GITHUB_OUTPUT
          echo "digest_arm64=$DIGEST_ARM64" >> $GITHUB_OUTPUT

      - name: Create and push manifest
        run: |
          docker buildx imagetools create \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.epoch }} \
            ${{ steps.validate-digests.outputs.digest_amd64 }} \
            ${{ steps.validate-digests.outputs.digest_arm64 }}
          
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker buildx imagetools create \
              -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
              ${{ steps.validate-digests.outputs.digest_amd64 }} \
              ${{ steps.validate-digests.outputs.digest_arm64 }}
          fi

  # 関連リポジトリのcompose.ymlを更新しPRを作成するジョブ
  update-related-repo:
    name: Update Related Repository
    runs-on: ubuntu-latest
    needs: [merge, prepare]  # prepare ジョブも依存に追加
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout related repository
        uses: actions/checkout@v4
        with:
          repository: densuke/2025-network-doc
          path: 2025-network-doc
          token: ${{ secrets.PAT_TOKEN }}  # Personal Access Token with repo access

      - name: Update compose.yml
        run: |
          cd 2025-network-doc
          # 日付を取得してブランチ名に使用
          DATE=$(date +%Y%m%d)
          BRANCH_NAME="update-sphinx-image-$DATE"
          # エポック秒のタグを使用ds.prepare.outputs.epoch }}"
          NEW_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.epoch }}"
          
          # Gitの設定
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 新しいブランチを作成
          git checkout -b $BRANCH_NAME
          
          # compose.ymlの更新（シンプルな置換の例）
          # 正規表現でイメージ名の行を探して更新
          sed -i -E "s|image: ghcr.io/[a-zA-Z0-9_-]+/sphinx-texlive:[a-zA-Z0-9_.-]+|image: $NEW_IMAGE|g" compose.yml
          
          # 変更をコミット
          git add compose.yml
          git commit -m "Update Sphinx image to $NEW_IMAGE"
          
          # GitHub にプッシュ
          git push --set-upstream origin $BRANCH_NAME
          
          # PRの作成
          PR_TITLE="Update Sphinx image to version ${{ needs.prepare.outputs.epoch }}"
          PR_BODY="This PR updates the Sphinx image reference in compose.yml to the specific version: $NEW_IMAGE"
          
          # GitHub CLI を使用してPRを作成
          gh pr create --repo densuke/2025-network-doc \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base main \
            --head $BRANCH_NAME
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}