name: イメージ作成とpush

on:
  # 毎週月曜日の日本時間午後3時(UTC 06:00)に実行
  schedule:
    - cron: '0 12 * * 0' # 毎週日曜日の12:00(UTC)に実行
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # 手動実行のためのトリガー
  workflow_dispatch:


# GHCRへプッシュできるよう権限を設定
permissions:
  contents: read
  packages: write
  id-token: write

# 並列起動を防ぐため、最後の作業のみ動くようにする
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  # actかどうかを確認するためのチェックジョブ
  test_act:
      runs-on: ubuntu-latest
      outputs:
        act: ${{ steps.act.outputs.act }}
      timeout-minutes: 1
      steps:
      - name: actかどうかを確認
        id: act
        run: |
          if [ -n "$ACT" ]; then
            echo "act=true" >> $GITHUB_OUTPUT
          else
            echo "act=false" >> $GITHUB_OUTPUT
          fi
  make_serial:
      runs-on: ubuntu-latest
      timeout-minutes: 1
      outputs:
        serial: ${{ steps.serial.outputs.serial }}
      steps:
      - name: 日時のシリアル番号を作成(後でタグとして使います)
        id: serial
        run: |
          echo "serial=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
  build:
      strategy:
        fail-fast: true
        matrix:
          # linux/amd64ならubuntu-24.04で、
          # linux/arm64ならubuntu-24.04-arm64でビルドを行う
          include:
            - platform: linux/amd64
              runner: ubuntu-24.04
              tag_suffix: amd64
            - platform: linux/arm64
              runner: ${{ needs.test_act.outputs.act == 'true' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
              tag_suffix: arm64
      runs-on: ${{ matrix.runner }}
      name: イメージビルド(${{ matrix.platform }})
      needs: 
          - make_serial
          - test_act
      timeout-minutes: 20
      # amd64とarm64のビルドのため、ストラテジーを設定
      # それぞれ使用するランナーはubuntu-24.04およびubuntu-24.04-arm64とする
      steps:
      - name: ソースの取得
        uses: actions/checkout@v4
      - name: Dockerの準備
        uses: docker/setup-buildx-action@v2
      - name: Dockerのストレージの準備(qemu)
        uses: docker/setup-qemu-action@v2
      - name: Dockerのログイン
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # GitHubのトークンを使用して、GHCRへログインします。
          # これにより、イメージをpushすることができるようになります。
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: イメージビルドと送信
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ needs.test_act.outputs.act != 'true' }}
          load: ${{ needs.test_act.outputs.act == 'true' }}
          tags: |
              ghcr.io/${{ github.repository }}:${{ needs.make_serial.outputs.serial }}-${{ matrix.tag_suffix }}
          platforms: ${{ matrix.platform }}
          # unknown/unknown対策
          provenance: false
          build-args: |
              # ビルド時に必要な引数を指定します。
              # ここでは、シリアル番号をARGとして渡しています。
              SERIAL=${{ needs.make_serial.outputs.serial }}
  create_manifest:
      name: マニフェストの作成
      runs-on: ubuntu-latest
      timeout-minutes: 1
      needs: 
          - build
          - make_serial
          - test_act
      if: ${{ needs.test_act.outputs.act != 'true' }}
      steps:
      - name: Dockerのログイン
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: マニフェストの作成
        run: |
          # マニフェストの作成を行います。
          # ここでは、linux/amd64とlinux/arm64のイメージをまとめて1つのマニフェストにします。
          docker manifest create ghcr.io/${{ github.repository }}:${{ needs.make_serial.outputs.serial }} \
          ghcr.io/${{ github.repository }}:${{ needs.make_serial.outputs.serial }}-amd64 \
          ghcr.io/${{ github.repository }}:${{ needs.make_serial.outputs.serial }}-arm64
          docker manifest create ghcr.io/${{ github.repository }}:latest \
          ghcr.io/${{ github.repository }}:${{ needs.make_serial.outputs.serial }}-amd64 \
          ghcr.io/${{ github.repository }}:${{ needs.make_serial.outputs.serial }}-arm64
          # マニフェストのプッシュを行います。
          docker manifest push ghcr.io/${{ github.repository }}:${{ needs.make_serial.outputs.serial }}
          docker manifest push ghcr.io/${{ github.repository }}:latest
  clean:
      # actで実行していたときは、作ったローカルイメージは削除しておきます
      name: ローカルイメージの削除
      needs: 
          - build
          - make_serial
          - test_act
      if: ${{ needs.test_act.outputs.act == 'true' }}
      runs-on: ubuntu-latest
      timeout-minutes: 1
      steps:
        - name: イメージの削除
          run: |
            # actで実行していたときは、作ったローカルイメージは削除しておきます
            docker rmi ghcr.io/${{ github.repository }}:${{ needs.make_serial.outputs.serial }}-amd64 || true
            docker rmi ghcr.io/${{ github.repository }}:${{ needs.make_serial.outputs.serial }}-arm64 || true
            # actで実行しているときはアーキテクチャ名の付かないシリアルタグはできないはずですが念のため
            docker rmi ghcr.io/${{ github.repository }}:${{ needs.make_serial.outputs.serial }} || true
            docker image prune -f


  # 関連リポジトリのcompose.ymlを更新しPRを作成するジョブ
  update-related-repo:
    name: Update Related Repository
    runs-on: ubuntu-latest
    needs: 
      - build
      - make_serial
      - test_act
    # mainブランチへのpushイベント時のみ実行するように条件を修正
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout related repository
        uses: actions/checkout@v4
        with:
          repository: densuke/2025-network-doc
          path: 2025-network-doc
          token: ${{ secrets.PAT_TOKEN }}  # Personal Access Token with repo access

      - name: Update compose.yml
        run: |
          cd 2025-network-doc
          # 日付を取得してブランチ名に使用
          DATE=$(date +%Y%m%d)
          BRANCH_NAME="update-sphinx-image-$DATE"
          # エポック秒のタグを使用
          NEW_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.epoch }}"
          
          # Gitの設定
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 新しいブランチを作成
          git checkout -b $BRANCH_NAME
          
          # compose.ymlの更新（シンプルな置換の例）
          # 正規表現でイメージ名の行を探して更新
          sed -i -E "s|image: ghcr.io/[a-zA-Z0-9_-]+/sphinx-texlive:[a-zA-Z0-9_.-]+|image: $NEW_IMAGE|g" compose.yml
          
          # 変更をコミット
          git add compose.yml
          git commit -m "Update Sphinx image to $NEW_IMAGE"
          
          # GitHub にプッシュ
          git push --set-upstream origin $BRANCH_NAME
          
          # PRの作成
          PR_TITLE="Update Sphinx image to version ${{ needs.prepare.outputs.epoch }}"
          PR_BODY="This PR updates the Sphinx image reference in compose.yml to the specific version: $NEW_IMAGE"
          
          # GitHub CLI を使用してPRを作成
          gh pr create --repo densuke/2025-network-doc \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base main \
            --head $BRANCH_NAME
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
